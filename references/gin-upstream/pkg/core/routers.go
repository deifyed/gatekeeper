/*
 * Reference Upstream
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package core

import (
	"context"
	"fmt"
	"github.com/coreos/go-oidc"
	"github.com/gin-gonic/gin"
	"log"
	"net/http"
	"os"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method string
	// Pattern is the pattern of the URI.
	Pattern string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	
	ctx := context.Background()
	issuer := os.Getenv("ISSUER")
	clientID := os.Getenv("CLIENT_ID")


	router.GET("/open", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{})
	})
	
	authMiddleware, err := createAuthMiddleware(ctx, issuer, clientID)
	if err != nil {
		log.Fatal(fmt.Errorf("error creating auth middleware"))
	}

	router.Use(authMiddleware)

	router.GET("/closed", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{})
	})

	return router
}

func createAuthMiddleware(ctx context.Context, issuer, clientID string) (gin.HandlerFunc, error) {
	provider, err := oidc.NewProvider(ctx, issuer)
	if err != nil {
	    return nil, fmt.Errorf("creating provider: %w", err)
	}

	verifier := provider.Verifier(&oidc.Config{ClientID: clientID})

	return func(c *gin.Context) {
		rawIDToken, err := c.Cookie("id_token")
		if err != nil {
			c.Status(http.StatusBadRequest)

			return
		}

		_, err = verifier.Verify(ctx, rawIDToken)
		if err != nil {
			c.Status(http.StatusUnauthorized)

			return
		}
		
		c.Next()
	}, nil
}
