/*
 * Gatekeeper
 *
 * Handles OIDC authentication for static web apps
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package routers

import (
	"github.com/deifyed/gatekeeper/pkg/core/handlers"
	"github.com/sirupsen/logrus"
	"os"

	"github.com/deifyed/gatekeeper/pkg/core/config"
	"github.com/deifyed/gatekeeper/pkg/core/cookies"
	"github.com/deifyed/gatekeeper/pkg/core/discovery"
	"github.com/deifyed/gatekeeper/pkg/flows/authcode"
	"github.com/deifyed/gatekeeper/pkg/statestorage/memory"

	"github.com/gin-gonic/gin"
)

// NewRouter returns a new router.
func New(cfg config.Config) *gin.Engine {
	router := gin.Default()

	stateStorage := memory.New()
	cookieHandler := cookies.NewCookieHandler(cfg.CookiePrefix, cfg.BaseURL.Hostname(), true, true)
	logger := &logrus.Logger{
		Out: os.Stdout,
		Formatter: &logrus.JSONFormatter{
			PrettyPrint: true,
		},
		Level: logrus.InfoLevel,
	}

	discoveryDocument, err := discovery.FetchDiscoveryDocument(cfg.DiscoveryURL)
	if err != nil {
		logger.Fatal(err)
	}

	router.GET("/", handlers.CreateIndexHandler(cfg.BaseURL))
	router.StaticFile("/specification", "./specification.yaml")

	router.GET("/login", authcode.CreateLoginHandler(stateStorage, authcode.CreateLoginHandlerOpts{
		Logger:            logger,
		AuthorizeEndpoint: discoveryDocument.AuthorizationEndpoint,
		BaseURL:           cfg.BaseURL.String(),
		ClientID:          cfg.ClientID,
		CookieHandler:     cookieHandler,
	}))

	router.GET("/callback", authcode.CreateCallbackHandler(stateStorage, authcode.CreateCallbackHandlerOpts{
		Logger:        logger,
		TokenEndpoint: discoveryDocument.TokenEndpoint,
		ClientID:      cfg.ClientID,
		ClientSecret:  cfg.ClientSecret,
		CookieHandler: cookieHandler,
	}))

	return router
}
